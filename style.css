/* ● */

/* 🦄05 margin auto 가운데정렬 (네모네모 박스 디자인) */

/*⚾(1) 박스 가운데 정렬  공식
  display: block;
  margin: auto;
  */

/* (1)-2 
  margin auto 뜻 : 자신이 가지고있는 마진을 모두 쓴다는 의미

  margin : 0 auto 👉왼쪽,오른쪽의 마진을 모두 쓰니까, 가운데 정렬이 됨

  margin-left:auto 👉 왼쪽에만 auto붙어서 왼쪽 마진 모두 씀 👉 오른쪽끝으로 붙음 */

/* (1)-3
  display:block 지워도 됨. div,h1,p 태그등등은 block을 내장하고있음 */

.description {
  width: 400px;
  background-color: violet;

  /* (1) 박스 가운데 정렬 공식*/
  display: block;
  margin: auto;

  /* (1)-2   margin: auto;와 같은 의미 */
  margin-left: auto;
  margin-right: auto;
}

.description-2 {
  width: 100px;
  background-color: violet;

  /* (1)-2 */
  margin-left: auto;
}

.description-3 {
  width: 100px;
  background-color: violet;

  /* (1)-3 display:block 지워도 됨. */
  margin: auto;

  /* (2) */
  border-radius: 5px;
}

/*  🦄06 float (레이아웃 만들기 1)*/

/* float
(1)-1
float:left : 띄워서 왼쪽 정렬
공간을 차지하지않음

(1)-2
clear 속성을 사용하면 float 다음에 오는 박스들이 제자리를 찾게 됩니다. 
*/

.header {
  width: 100%;
  height: 50px;
  background-color: blue;
}

.left-box {
  width: 20%;
  height: 100px;
  background-color: aqua;
  /* (1) float */
  float: left;
}
.right-box {
  width: 80%;
  height: 100px;
  float: left;
  background-color: green;
}
.footer {
  width: 100%;
  height: 50px;
  /* (1)-2 clear 속성 */
  clear: both;
  background-color: grey;
}

/*  🦄07 display: inline-block (레이아웃 만들기 2) */

/* (1) display : inline-block

- display : inline-block코드는 박스를 만들어 왼쪽으로 정렬시키는 코드입니다. 

– display : inline-block을 쓰시면 전부 왼쪽으로 정렬됩니다. 

– 하지만 div 태그 사이에 빈칸, 엔터가 있다면 그대로 렌더링해줍니다. 
그래서 div사이의 공백을 제거해주는게 중요합니다.  */

/* (1)-2 공백제거 편법1. 주석처리 기호 사용하기 */

.container7 {
  width: 800px;
}
.header7 {
  width: 100%;
  height: 50px;
  background-color: aqua;
}

.left7 {
  width: 50%;
  height: 100px;
  background-color: blue;
  /*(1) display : inline-block  */
  display: inline-block;
}
.right7 {
  width: 50%;
  height: 100px;
  background-color: chartreuse;
  /*(1) */
  display: inline-block;
}

/* (1)-3 width의 합을 99%이하로 설정하고+ div사이에 빈칸, 엔터 넣으면, 
다음줄로 안넘어가고 빈칸이 나오는걸 볼 수 있음 */

.left7_2 {
  /* (1)-3 */
  width: 50%;
  height: 100px;
  background-color: yellowgreen;
  display: inline-block;
}
.right7_2 {
  /* (1)-3 */
  width: 30%;
  height: 100px;
  background-color: violet;
  display: inline-block;
}

/*  (1)-4 B:  <p>태그안에 글자 추가하면 박스가 밀려나감 
default값 : baseline  👉 아무거나 로 바꾸면 정상적으로 박스가 표시됨  */

.left7_3 {
  width: 50%;
  height: 100px;
  background-color: yellowgreen;
  display: inline-block;
}
.right7_3 {
  width: 30%;
  height: 100px;
  background-color: violet;
  display: inline-block;
  /* (1)-4   */
  vertical-align: top;
}

/* 🦄08 float. 박스 안 img 100% 딱 맞추기 (레이아웃 만들기 숙제) */

/* (1) float */

/* (2) 박스 안 img 100% 딱 맞추기 :           
img 넣었는데 박스보다 크거나 작을 때, 
width="100%"를 html에 직접 박아넣음 (css에 width설정 안에서 100%가 되는 현상) 
👉박스안에 100% 딱맞게 됨 */

/* (3) B: <h4>의 default margin때문에 <p>가 밑으로 내려가 있는 상황 👉 margin: 0을 줌  */

/* (4) float이후의 div에 clear: both; */

.blog-container {
  width: 90%;
  height: 200px;
  background: yellowgreen;
  /* (1) float */
  float: left;
}

.blog-image {
  /* (2) */
  width: 10%;
  height: 200px;
  background: burlywood;
  /* (1)  */
  float: left;
}

.blog-profile {
  float: left;
}

/* (3)  <h4>의 default margin때문에 <p>가 밑으로 내려가 있는 상황 */
.blog-profile h4 {
  margin: 0px;
}

.blog-pic {
  float: left;
}

.blog-title {
  /* (4) clear: both; */
  clear: both;
}

/* 가운데 정렬 */
.container8 {
  margin: auto;
}

/* 🦄09 .class selector{ }.class>selector{ } (셀렉터를 이용해 CSS정리) */

/* (1) 👉capture정리

B: float로 인해, 다음 div의 margin이 float적용된 div를 무시하고 그 위의 div부터 적용됨 : 

⭐clear:both적용된 div를 중간에 넣은 후 , 그 라인부터 margin-top적용 */

.float09_1 {
  width: 70%;
  height: 20px;
  background: yellowgreen;
  float: left;
}
.float09_2 {
  width: 30%;
  height: 20px;
  background: violet;
  float: left;
}

/* (1) ⭐ */
.clear_both09 {
  clear: both;
}

/* (1)  */
.margin09 {
  margin-top: 30px;
  height: 20px;
  background: blue;
}

/* (2) display: inline-block; : 수평정렬 */
/* (3)-2 li-inline안의 모든 태그*/
.li-inline li {
  display: inline-block;
  width: 100px;
  text-align: center;
}
/* (3)-3 li-inline안 바로 밑의 태그*/
.li-inline > li {
  background-color: yellowgreen;
}

/* (3)-4 바로 밑이 아니면 적용 안됨 */
.li-inline > span {
  background-color: red;
}

/* (4) class 2개 동시적용 */
.blue {
  color: blue;
}

.navbar {
  width: 800px;
  margin: auto;
  margin-bottom: 20px;
  padding: 10px;
}

/* (5) a링크 밑줄 제거  text-decoration: none; */
.li-inline a {
  text-decoration: none;
}

/* (6) 보라색링크(visited link) 색깔 수정 */
.li-inline a:visited {
  color: crimson;
}

/* 🦄10 background & margin 버그 */
/* (1)background-size
100% : 사이즈 줄였을때 이미지 하단에공백이 생김
cover : 가장 많이 쓰임, 공백없이 background 꽉 채움
contain
*/

/* (2) 이미지가 시작하는 위치 : default값 : 왼쪽 */

/* (3) B: 주의해야할 margin 버그  (👉margin-collapsing effect)
👉capture설명

margin 두개가 만나면 (박스들의 테두리가 만나면) 둘이 합쳐집니다. 
정확히 말하면 둘 중에 더 큰 마진을 하나만 적용하게 되는 것이지요. 
*/

/* (3)-2 A: 
1w. 부모태그에 padding을 넣는 방식으로 코딩하기

2w. 부모태그에 padding을 1px라도 준 후, 자식태그에 margin넣기 */

.background10 {
  width: 100%;
  height: 300px;
  background: url(./images/etc/background.jpg);

  /* (1) */
  background-size: cover;
  /* background-size: 100%; */
  /* background-size: contain; */
  background-repeat: no-repeat;

  /* (2) */
  background-position: center;
}

.text10 {
  /* (3) margin 버그  */
  margin-top: 100px;
}

.background10_2 {
  width: 100%;
  height: 300px;
  background: url(./images/etc/background2.jpg);

  /* (3)-2-1w margin 버그 해결법*/
  padding-top: 100px;
}

.text10_2 {
  /* (3)-2-2w */
  margin-top: 200px;
}

/* 🦄11 Position */

/* (2) position: relative
원래위치에서부터 좌표변경 top,bottom,left,right */

/* (3)fixed */

/* (4)absolute 
기준점으로 삼을 부모div에 position:relative 넣고, 여기에 absolute 넣으면, 부모를 기준으로 top,bottom,left,right 적용 */

/* (5) absolute의 가운데 정렬 공식
B: absolute사용하면 가운데정렬 일반공식이 풀림. 이때 사용함

  position: absolute;
  left: 0;
  right: 0;
  margin: auto;
  width: ~~~ px;
*/

.background11 {
  width: 100%;
  height: 300px;
  background: url(./images/etc/background.jpg);
  padding-top: 100px;

  /* (4) */
  position: relative;
}

.c11 .button {
  padding: 10px;
  font-size: 18px;
  background-color: orange;

  /* 가운데정렬 일반공식 */
  display: block;
  margin: auto;
}

.position1 {
  /* (2) relative  */
  position: relative;
  left: 30px;
}

.position2 {
  /* (3)fixed */
  position: fixed;
  top: 0px;
  left: 30px;
}

.position3 {
  /* (4)⭐absolute */
  position: absolute;
  bottom: 30px;

  /* (5) absolute의 가운데 정렬 공식*/
  left: 0;
  right: 0;
  margin: auto;
  width: 400px;
}

/* 🦄12 겹치는 박스만들기 & box-sizing (Position 숙제 & 반응형 width & box-sizing) */

/* (1)겹치는 박스만들기 
relative넣고 -px 로 박스를 위로 올림 */

/* (2)max-width 박스가 늘어나는 한계 지정 */

/* (3) box-sizing: border-box; 
👉capture정리

css시작할때 기본으로 넣고 시작함

👉normalize.css
https://github.com/necolas/normalize.css/blob/master/normalize.css
*/

.c12 .box {
  /* (2)max-width  */
  max-width: 600px;
  width: 80%;
  margin: auto;

  text-align: center;
  background-color: violet;

  /* (1)겹치는 박스만들기  */
  position: relative;
  top: -50px;
}

/* (3)-2 padding을 줌, 
    둘다 같은 width인데 박스 크기가 달라짐
    padding과 border의 크기는 box-size에 적용이 안됨. 
    👉 box-size 똑같이 코딩해도, padding, border때문에 예상외로  다른 크기가 되는 실수가 많음 */
.padding12 {
  padding: 30px;
}

/* (3)-3 box-sizing: border-box;
 padding, border크기도 전부 합쳐서 박스 크기 적용시킴 */
.border-box12 {
  padding: 30px;
  box-sizing: border-box;
}

/*  🦄13 form & input 
👉html*/

.c13 form {
  padding: 10px;
  }

/* input[type=text] 
input의 type속성이 email(text, submit...etc)인 요소만 찾아서 스타일을 줄 수 있습니다. (class대신 사용) */

.c13 input[type="text"] {
  padding: 30px;
  font-size: 20px;
  border-radius: 5px;
  border: 1px solid red;
}

/* type속성없이, 모든 input 스타일링은 하지말아야 할것 */
input {
}

/*🦄14 form & input 숙제: Contact Us 섹션 만들기 */

/* ,콤마 : 동시에 여러개의 selector 적용*/
.c14 div,input,textarea{
  box-sizing: border-box;
}

/* 🦄15 Table 레이아웃과 vertical-align속성
👉html
*/

.c15 table{
  /* padding: 10px; */
  /* height: 50px;
  width: 50px; */
}

.c15 th,td {
  border: 1px solid violet;
  padding: 20px;
  text-align: center;
}

/* (2) */
.border-collapse{
  border-collapse: collapse;
}

/* (3) */
.vertical-align {
  vertical-align: middle;
}
.vertical-align2 {
  vertical-align: bottom;
}